// <auto-generated />
using System;
using Digimon.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Digimon.Database.Migrations
{
    [DbContext(typeof(DigimonContext))]
    [Migration("20220806184629_InitialCommit")]
    partial class InitialCommit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CardColor", b =>
                {
                    b.Property<long>("CardsId")
                        .HasColumnType("bigint")
                        .HasColumnName("cards_id");

                    b.Property<long>("ColorsId")
                        .HasColumnType("bigint")
                        .HasColumnName("colors_id");

                    b.HasKey("CardsId", "ColorsId")
                        .HasName("pk_card_color");

                    b.HasIndex("ColorsId")
                        .HasDatabaseName("ix_card_color_colors_id");

                    b.ToTable("card_color", (string)null);
                });

            modelBuilder.Entity("CardTrait", b =>
                {
                    b.Property<long>("CardsId")
                        .HasColumnType("bigint")
                        .HasColumnName("cards_id");

                    b.Property<long>("TraitsId")
                        .HasColumnType("bigint")
                        .HasColumnName("traits_id");

                    b.HasKey("CardsId", "TraitsId")
                        .HasName("pk_card_trait");

                    b.HasIndex("TraitsId")
                        .HasDatabaseName("ix_card_trait_traits_id");

                    b.ToTable("card_trait", (string)null);
                });

            modelBuilder.Entity("Digimon.Database.Models.Card", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("DP")
                        .HasColumnType("integer")
                        .HasColumnName("dp");

                    b.Property<int?>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("PlayCost")
                        .HasColumnType("integer")
                        .HasColumnName("play_cost");

                    b.Property<long>("RarityId")
                        .HasColumnType("bigint")
                        .HasColumnName("rarity_id");

                    b.Property<string>("SetId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("set_id");

                    b.HasKey("Id")
                        .HasName("pk_cards");

                    b.HasIndex("RarityId")
                        .HasDatabaseName("ix_cards_rarity_id");

                    b.ToTable("cards", (string)null);
                });

            modelBuilder.Entity("Digimon.Database.Models.Color", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_colors");

                    b.ToTable("colors", (string)null);
                });

            modelBuilder.Entity("Digimon.Database.Models.Deck", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_decks");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_decks_user_id");

                    b.ToTable("decks", (string)null);
                });

            modelBuilder.Entity("Digimon.Database.Models.DeckCard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CardId")
                        .HasColumnType("bigint")
                        .HasColumnName("card_id");

                    b.Property<long>("DeckId")
                        .HasColumnType("bigint")
                        .HasColumnName("deck_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_deck_cards");

                    b.HasIndex("CardId")
                        .HasDatabaseName("ix_deck_cards_card_id");

                    b.HasIndex("DeckId")
                        .HasDatabaseName("ix_deck_cards_deck_id");

                    b.ToTable("deck_cards", (string)null);
                });

            modelBuilder.Entity("Digimon.Database.Models.Digivolution", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CardId")
                        .HasColumnType("bigint")
                        .HasColumnName("card_id");

                    b.Property<long>("ColorId")
                        .HasColumnType("bigint")
                        .HasColumnName("color_id");

                    b.Property<int>("Cost")
                        .HasColumnType("integer")
                        .HasColumnName("cost");

                    b.HasKey("Id")
                        .HasName("pk_digivolutions");

                    b.HasIndex("CardId")
                        .HasDatabaseName("ix_digivolutions_card_id");

                    b.HasIndex("ColorId")
                        .HasDatabaseName("ix_digivolutions_color_id");

                    b.ToTable("digivolutions", (string)null);
                });

            modelBuilder.Entity("Digimon.Database.Models.Rarity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_rarities");

                    b.ToTable("rarities", (string)null);
                });

            modelBuilder.Entity("Digimon.Database.Models.Trait", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_traits");

                    b.ToTable("traits", (string)null);
                });

            modelBuilder.Entity("Digimon.Database.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Digimon.Database.Models.UserCard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CardId")
                        .HasColumnType("bigint")
                        .HasColumnName("card_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_cards");

                    b.HasIndex("CardId")
                        .HasDatabaseName("ix_user_cards_card_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_cards_user_id");

                    b.ToTable("user_cards", (string)null);
                });

            modelBuilder.Entity("CardColor", b =>
                {
                    b.HasOne("Digimon.Database.Models.Card", null)
                        .WithMany()
                        .HasForeignKey("CardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_card_color_cards_cards_id");

                    b.HasOne("Digimon.Database.Models.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_card_color_colors_colors_id");
                });

            modelBuilder.Entity("CardTrait", b =>
                {
                    b.HasOne("Digimon.Database.Models.Card", null)
                        .WithMany()
                        .HasForeignKey("CardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_card_trait_cards_cards_id");

                    b.HasOne("Digimon.Database.Models.Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_card_trait_traits_traits_id");
                });

            modelBuilder.Entity("Digimon.Database.Models.Card", b =>
                {
                    b.HasOne("Digimon.Database.Models.Rarity", "Rarity")
                        .WithMany()
                        .HasForeignKey("RarityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cards_rarities_rarity_id");

                    b.Navigation("Rarity");
                });

            modelBuilder.Entity("Digimon.Database.Models.Deck", b =>
                {
                    b.HasOne("Digimon.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_decks_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Digimon.Database.Models.DeckCard", b =>
                {
                    b.HasOne("Digimon.Database.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_deck_cards_cards_card_id");

                    b.HasOne("Digimon.Database.Models.Deck", "Deck")
                        .WithMany()
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_deck_cards_decks_deck_id");

                    b.Navigation("Card");

                    b.Navigation("Deck");
                });

            modelBuilder.Entity("Digimon.Database.Models.Digivolution", b =>
                {
                    b.HasOne("Digimon.Database.Models.Card", "Card")
                        .WithMany("Digivolutions")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_digivolutions_cards_card_id");

                    b.HasOne("Digimon.Database.Models.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_digivolutions_colors_color_id");

                    b.Navigation("Card");

                    b.Navigation("Color");
                });

            modelBuilder.Entity("Digimon.Database.Models.UserCard", b =>
                {
                    b.HasOne("Digimon.Database.Models.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_cards_cards_card_id");

                    b.HasOne("Digimon.Database.Models.User", "User")
                        .WithMany("Cards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_cards_users_user_id");

                    b.Navigation("Card");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Digimon.Database.Models.Card", b =>
                {
                    b.Navigation("Digivolutions");
                });

            modelBuilder.Entity("Digimon.Database.Models.User", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
